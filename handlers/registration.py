import re
from aiogram import Router, F, types
from aiogram.filters import StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from services.google_sheets import update_user_data
from keyboards.edu_button import edu_keyboard

router = Router()

# --- FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
class Registration(StatesGroup):
    waiting_for_fio = State()
    waiting_for_phone = State()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def get_identifier(message: types.Message | types.CallbackQuery):
    if isinstance(message, types.CallbackQuery):
        message = message.message
    return message.from_user.username or f"id_{message.from_user.id}"

# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ---
def format_phone(phone: str) -> str | None:
    digits = re.sub(r"\D", "", phone)
    if len(digits) == 11 and digits.startswith(("7", "8")):
        digits = "7" + digits[1:]
    elif len(digits) == 10:
        digits = "7" + digits
    else:
        return None
    if len(digits) != 11:
        return None
    return f"+7 {digits[1:4]} {digits[4:7]} {digits[7:9]} {digits[9:11]}"

# --- –ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π) ---
async def start_registration(event: Message | CallbackQuery, state: FSMContext, purpose: str):
    msg = event.message if isinstance(event, CallbackQuery) else event
    await state.update_data(purpose=purpose)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await msg.answer("üëã –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –§–ò–û:")
    await state.set_state(Registration.waiting_for_fio)

# --- –ü–æ–ª—É—á–∞–µ–º –§–ò–û ---
@router.message(StateFilter(Registration.waiting_for_fio))
async def process_fio(message: Message, state: FSMContext):
    await state.update_data(fio=message.text)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
        resize_keyboard=True
    )
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É:", reply_markup=keyboard)
    await state.set_state(Registration.waiting_for_phone)

# --- –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç ---
@router.message(StateFilter(Registration.waiting_for_phone), F.contact)
async def process_contact(message: Message, state: FSMContext):
    data = await state.get_data()
    fio = data.get("fio", "")
    purpose = data.get("purpose")
    phone = message.contact.phone_number

    identifier = get_identifier(message)
    update_user_data(identifier, fio, format_phone(phone))

    await message.answer("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –°–ø–∞—Å–∏–±–æ!", reply_markup=ReplyKeyboardRemove())
    await state.clear()

    # –î–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await post_registration_action(message, purpose)

# --- –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–µ–∫—Å—Ç–æ–º ---
@router.message(StateFilter(Registration.waiting_for_phone))
async def process_phone_text(message: Message, state: FSMContext):
    formatted = format_phone(message.text)
    if not formatted:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä: +7 999 999 99 99")
        return

    data = await state.get_data()
    fio = data.get("fio", "")
    purpose = data.get("purpose")

    identifier = get_identifier(message)
    update_user_data(identifier, fio, formatted)

    await message.answer("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –°–ø–∞—Å–∏–±–æ!", reply_markup=ReplyKeyboardRemove())
    await state.clear()

    # –î–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await post_registration_action(message, purpose)


# --- –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —á—Ç–æ –¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
async def post_registration_action(message: Message, purpose: str | None):
    if purpose == "edu":
        await message.answer(
            "üìö –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–±—É—á–µ–Ω–∏—é üëá",
            reply_markup=edu_keyboard()
        )
    elif purpose == "buy":
        await message.answer("üí≥ –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–µ.")
    elif purpose == "manager":
        await message.answer("üë®‚Äçüíº –° –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.")
    else:
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
