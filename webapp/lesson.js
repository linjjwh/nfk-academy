document.addEventListener("DOMContentLoaded", () => {
  const params = new URLSearchParams(window.location.search);
  const lessonNum = parseInt(params.get("num")) || 1;

  const lessonTitle = document.getElementById("lesson-title");
  const lessonIntro = document.getElementById("lesson-text"); // –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
  const lessonBody = document.getElementById("lesson-body"); // —Å—é–¥–∞ —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É—Ä–æ–∫–∞
  const nextBtn = document.getElementById("next-btn");
  const backBtn = document.getElementById("back-btn");
  const topProgressFill = document.getElementById("top-progress-bar-fill");
  const topProgressPercent = document.getElementById("top-progress-percent");

  // –ù–∞–π–¥—ë–º —É—Ä–æ–∫ –≤ lessonsData (—Ñ–∞–π–ª lessonsData.js –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–∫–ª—é—á—ë–Ω —Ä–∞–Ω—å—à–µ)
  const lesson = (typeof lessonsData !== "undefined") ? lessonsData.find(l => l.id === lessonNum) : null;
  lessonTitle.textContent = lesson?.title || `–£—Ä–æ–∫ ${lessonNum}`;

  // –û—á–∏—Å—Ç–∏–º —Ç–µ–ª–æ —É—Ä–æ–∫–∞
  lessonBody.innerHTML = "";

  if (!lesson) {
    const p = document.createElement("p");
    p.textContent = "–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.";
    lessonBody.appendChild(p);
    return;
  }

  // –†–µ–Ω–¥–µ—Ä–∏–º —Å–µ–∫—Ü–∏–∏
  lesson.sections.forEach(section => {
    // –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–µ–∫—Ü–∏–∏
    const sec = document.createElement("div");
    sec.classList.add("lesson-section", "fade-in");

    // –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (section.heading) {
      const h = document.createElement("h2");
      h.textContent = section.heading;
      sec.appendChild(h);
    }

    /* ===== –¢–ò–ü–´ –°–ï–ö–¶–ò–ô ===== */
    if (section.type === "text") {
      section.content.forEach(pText => {
        const p = document.createElement("p");
        p.textContent = pText;
        sec.appendChild(p);
      });
    }

    if (section.type === "list") {
      const ul = document.createElement("ul");
      section.content.forEach(item => {
        const li = document.createElement("li");
        li.textContent = item;
        ul.appendChild(li);
      });
      sec.appendChild(ul);
    }

    if (section.type === "list-numbered" || section.type === "list-number") {
      const ol = document.createElement("ol");
      section.content.forEach(item => {
        const li = document.createElement("li");
        li.textContent = item;
        ol.appendChild(li);
      });
      sec.appendChild(ol);
    }

    if (section.type === "questions") {
      const wrap = document.createElement("div");
      wrap.classList.add("questions-block");
      section.content.forEach((q, idx) => {
        const p = document.createElement("p");
        p.textContent = `${idx + 1}. ${q}`;
        wrap.appendChild(p);
      });
      sec.appendChild(wrap);
    }

    /* ===== –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –¢–ò–ü–´ ===== */

// 1) Flipcards ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏–º–µ–Ω–∞ section.type: "flipcards" –∏–ª–∏ "flip-card"
    if (section.type === "flipcards" || section.type === "flip-cards" || section.type === "flip-card" || section.type === "flipcard") {
      const containerWrap = document.createElement("div");
      containerWrap.classList.add("flipcard-wrap");

      // –ø–æ–¥—Å–∫–∞–∑–∫–∞
      const hint = document.createElement("p");
      hint.classList.add("flipcard-hint");
      hint.textContent = "–ù–∞–∂–º–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ üëá";
      containerWrap.appendChild(hint);

      const container = document.createElement("div");
      container.classList.add("flipcard-container");

      // —Å–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç–æ—á–∫–∏
      (section.content || []).forEach(card => {
        const cardWrap = document.createElement("div");
        cardWrap.classList.add("flipcard");
        cardWrap.setAttribute("tabindex", "0");
        cardWrap.setAttribute("role", "button");
        cardWrap.setAttribute("aria-pressed", "false");

        const inner = document.createElement("div");
        inner.classList.add("flipcard-inner");

        const front = document.createElement("div");
        front.classList.add("flipcard-front");
        front.innerHTML = card.front || "";

        const back = document.createElement("div");
        back.classList.add("flipcard-back");
        back.innerHTML = card.back || "";

        inner.appendChild(front);
        inner.appendChild(back);
        cardWrap.appendChild(inner);
        container.appendChild(cardWrap);

        // –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ‚Äî –∑–∞–¥–∞—ë–º –≤—ã—Å–æ—Ç—É –ø–æ–¥ front
        inner.style.height = front.scrollHeight + "px";

        // —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≤—ã—Å–æ—Ç–æ–π
        const toggleFlip = () => {
          cardWrap.classList.toggle("flip");
          cardWrap.setAttribute("aria-pressed", cardWrap.classList.contains("flip") ? "true" : "false");

          if (cardWrap.classList.contains("flip")) {
            inner.style.height = back.scrollHeight + "px";
          } else {
            inner.style.height = front.scrollHeight + "px";
          }
        };

        // –∫–ª–∏–∫ / –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        cardWrap.addEventListener("click", toggleFlip);
        cardWrap.addEventListener("keydown", (e) => {
          if (e.key === "Enter" || e.key === " ") {
            e.preventDefault();
            toggleFlip();
          }
        });
      });

      containerWrap.appendChild(container);
      sec.appendChild(containerWrap);

      // –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞: –º–æ–∂–Ω–æ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —Å–¥–µ–ª–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –≤—ã—Å–æ—Ç—É —Ñ—Ä–æ–Ω—Ç–æ–≤
      requestAnimationFrame(() => {
        const allInner = container.querySelectorAll(".flipcard-inner");
        let maxFrontHeight = 0;

        allInner.forEach(inner => {
          const front = inner.querySelector(".flipcard-front");
          if (front.scrollHeight > maxFrontHeight) maxFrontHeight = front.scrollHeight;
        });

        allInner.forEach(inner => {
          // —Ç–æ–ª—å–∫–æ —Ñ—Ä–æ–Ω—Ç –∑–∞–¥–∞—ë–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º ‚Äî back –æ—Å—Ç–∞—ë—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º
          inner.style.height = maxFrontHeight + "px";
        });
      });
    }


    // 2) Choice (–º–∏–Ω–∏-–∑–∞–¥–∞—á–∫–∞)
    if (section.type === "choice" || section.type === "choice-scenario") {
      const qWrap = document.createElement("div");
      qWrap.classList.add("quiz-block");

      const qText = document.createElement("div");
      qText.classList.add("quiz-question");
      qText.textContent = section.content?.question || "";
      qWrap.appendChild(qText);

      const optsWrap = document.createElement("div");
      optsWrap.classList.add("quiz-options");

      (section.content?.options || []).forEach(opt => {
        const btn = document.createElement("button");
        btn.classList.add("quiz-btn");
        btn.type = "button";
        btn.textContent = opt.text || opt;

        btn.addEventListener("click", () => {
          // —É–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∏–ª–∏
          optsWrap.querySelectorAll("button").forEach(b => {
            b.classList.remove("selected", "correct", "wrong");
            b.disabled = true;
          });

          // –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
          btn.classList.add("selected");

          // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ö–æ–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å correct)
          if (opt.correct === true) {
            btn.classList.add("correct");
          } else if (opt.correct === false) {
            btn.classList.add("wrong");
          }

          // –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
          let feedback = qWrap.querySelector(".quiz-explanation");
          if (!feedback) {
            feedback = document.createElement("div");
            feedback.classList.add("quiz-explanation");
            qWrap.appendChild(feedback);
          }
          feedback.innerHTML = `<p>${opt.feedback || " "}</p>`;
          feedback.style.display = "block";
        });

        optsWrap.appendChild(btn);
      });

      qWrap.appendChild(optsWrap);
      sec.appendChild(qWrap);
    }

    // 3) Quiz ‚Äî section.type: "quiz" –∏–ª–∏ "quiz-single"
    if (section.type === "quiz" || section.type === "quiz-single") {
      const quizContainer = document.createElement("div");
      quizContainer.classList.add("quiz-container");

      const contentArray = Array.isArray(section.content) ? section.content : [section.content];

      contentArray.forEach((qObj, qIndex) => {
        const qBlock = document.createElement("div");
        qBlock.classList.add("quiz-block-item");
        qBlock.style.marginBottom = "18px";

        const qText = document.createElement("div");
        qText.classList.add("quiz-question");
        qText.textContent = `${qIndex + 1}. ${qObj.question || qObj.title || ""}`;
        qBlock.appendChild(qText);

        const optsWrap = document.createElement("div");
        optsWrap.classList.add("quiz-options");

        (qObj.options || []).forEach((optText, i) => {
          const btn = document.createElement("button");
          btn.classList.add("quiz-btn");
          btn.type = "button";
          btn.textContent = typeof optText === "string" ? optText : optText.text;
          btn.dataset.index = i;

          btn.addEventListener("click", () => {
            optsWrap.querySelectorAll("button").forEach(b => b.disabled = true);

            if (qObj.correct === null || typeof qObj.correct === "undefined") {
              btn.classList.add("neutral");
            } else {
              const correctIndex = Number(qObj.correct);
              if (i === correctIndex) {
                btn.classList.add("correct");
              } else {
                btn.classList.add("wrong");
                const correctBtn = optsWrap.querySelector(`button[data-index="${correctIndex}"]`);
                if (correctBtn) correctBtn.classList.add("correct");
              }
            }

            const expl = document.createElement("div");
            expl.classList.add("quiz-explanation");
            expl.textContent = qObj.explanation || "";
            expl.style.display = "block";
            qBlock.appendChild(expl);
          });

          optsWrap.appendChild(btn);
        });

        qBlock.appendChild(optsWrap);
        quizContainer.appendChild(qBlock);
      });

      sec.appendChild(quizContainer);
    }

// 4) Drag & Drop (—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–∞—Ä) ‚Äî —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–ª–∏–∫–∞ –∏ drag
if (section.type === "drag-drop") {
  const wrapper = document.createElement("div");
  wrapper.classList.add("dragdrop-wrapper");

  const dragWrap = document.createElement("div");
  dragWrap.classList.add("dragdrop-container");

  wrapper.appendChild(dragWrap);
  sec.appendChild(wrapper); // ‚úÖ —Å—é–¥–∞ –≤—Å—Ç–∞–≤–ª—è–µ–º wrapper, –Ω–µ dragWrap!

  const instruction = document.createElement("p");
  instruction.classList.add("dragdrop-instruction");
  instruction.textContent = section.content?.instruction || "–°–æ–µ–¥–∏–Ω–∏ —ç–ª–µ–º–µ–Ω—Ç—ã:";
  dragWrap.appendChild(instruction);

  const setsWrap = document.createElement("div");
  setsWrap.classList.add("dragdrop-sets");
  setsWrap.style.justifyContent = "space-between";
  setsWrap.style.gap = "40px";

  const groupA = document.createElement("div");
  groupA.classList.add("dragdrop-group", "group-a");
  groupA.style.display = "flex";
  groupA.style.flexDirection = "column";
  groupA.style.gap = "10px";

  const groupB = document.createElement("div");
  groupB.classList.add("dragdrop-group", "group-b");
  groupB.style.display = "flex";
  groupB.style.flexDirection = "column";
  groupB.style.gap = "10px";

  // --- –ë–ª–æ–∫–∏ A ---
  (section.content?.groupA || []).forEach(item => {
    const el = document.createElement("div");
    el.classList.add("drag-item");
    el.draggable = true;
    el.dataset.id = item.id;

    const textSpan = document.createElement("span");
    textSpan.classList.add("drag-item-text");
    textSpan.textContent = item.text;

    el.appendChild(textSpan);
    groupA.appendChild(el);
  });

  // --- –ë–ª–æ–∫–∏ B ---
  (section.content?.groupB || []).forEach(item => {
    const el = document.createElement("div");
    el.classList.add("drop-target");
    el.dataset.id = item.id;
    el.dataset.currentMatches = 0;

    const title = document.createElement("div");
    title.classList.add("drop-title");
    title.textContent = item.text;
    el.appendChild(title);

    groupB.appendChild(el);
  });

  setsWrap.appendChild(groupA);
  setsWrap.appendChild(groupB);
  dragWrap.appendChild(setsWrap);

  /* ===== –õ–æ–≥–∏–∫–∞ Drag & Drop  ===== */
  let draggedItem = null;

  // dragstart / dragend ‚Äî –Ω–∞–∑–Ω–∞—á–∞–µ–º –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ –¥–ª—è drag)
  groupA.querySelectorAll(".drag-item").forEach(drag => {
    drag.addEventListener("dragstart", e => {
      draggedItem = drag;
      drag.classList.add("dragging");
      // –ø–æ–º–µ—â–∞–µ–º id –≤ dataTransfer (–Ω–∞ —Å–ª—É—á–∞–π)
      try { e.dataTransfer.setData("text/plain", drag.dataset.id); } catch (err) {}
    });
    drag.addEventListener("dragend", () => {
      drag.classList.remove("dragging");
      draggedItem = null;
    });
  });

  // drop –∑–æ–Ω—ã
  groupB.querySelectorAll(".drop-target").forEach(drop => {
    drop.addEventListener("dragover", e => {
      e.preventDefault();
      drop.classList.add("hover");
    });
    drop.addEventListener("dragleave", () => {
      drop.classList.remove("hover");
    });
    drop.addEventListener("drop", e => {
      e.preventDefault();
      drop.classList.remove("hover");
      if (!draggedItem) {
        // –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ dataTransfer (–Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö)
        const id = e.dataTransfer && e.dataTransfer.getData ? e.dataTransfer.getData("text/plain") : null;
        if (id) {
          const candidate = dragWrap.querySelector(`.drag-item[data-id="${id}"]`);
          if (candidate) handleMatch(candidate, drop);
        }
        return;
      }
      handleMatch(draggedItem, drop);
    });
  });

  /* ===== CLICK –ª–æ–≥–∏–∫–∞ ‚Äî –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ø–µ—Ä–µ–º–µ—â—ë–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–æ–∂–µ) =====
     –ü–æ–≤–µ–¥–µ–Ω–∏–µ: –∫–ª–∏–∫ –ø–æ .drag-item -> –≤—ã–¥–µ–ª—è–µ–º –µ–≥–æ (selected).
     –ö–ª–∏–∫ –ø–æ .drop-target -> –µ—Å–ª–∏ –µ—Å—Ç—å selected -> –ø—Ä–æ–±—É–µ–º match.
     –ö–ª–∏–∫ –ø–æ –ø—É—Å—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ groupA -> –µ—Å–ª–∏ –µ—Å—Ç—å selected -> –≤–æ–∑–≤—Ä–∞—â–∞–µ–º selected –≤ groupA.
  */
  let selectedA = null;

  // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –Ω–∞ –≤–µ—Å—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  dragWrap.addEventListener("click", (e) => {
    const item = e.target.closest(".drag-item");
    if (item) {
      // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –±–ª–æ–∫–∏
      if (item.classList.contains("correct")) {
        // –µ—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–±—Ä–æ—Å selection –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞, –Ω–æ –ø–æ–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return;
      }
      // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä
      if (selectedA === item) {
        item.classList.remove("selected");
        selectedA = null;
      } else {
        // —Å–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π
        const prev = dragWrap.querySelector(".drag-item.selected");
        if (prev) prev.classList.remove("selected");
        item.classList.add("selected");
        selectedA = item;
      }
      return;
    }

    const drop = e.target.closest(".drop-target");
    if (drop && selectedA) {
      handleMatch(selectedA, drop);
      if (selectedA) {
        selectedA.classList.remove("selected");
        selectedA = null;
      }
      return;
    }

    // –∫–ª–∏–∫ –ø–æ –ø—É—Å—Ç–æ–º—É –º–µ—Å—Ç—É –≤–Ω—É—Ç—Ä–∏ groupA ‚Äî –≤–µ—Ä–Ω—ë–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –æ–±—Ä–∞—Ç–Ω–æ
    const clickedInGroupA = e.target.closest(".dragdrop-group.group-a");
    if (clickedInGroupA && selectedA) {
      groupA.appendChild(selectedA);
      selectedA.classList.remove("selected");
      selectedA = null;
      return;
    }
  });

  /* ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: –º–∞—Ä–∫–µ—Ä—ã, –∏ –æ–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (drag+click) ===== */
  function _ensureBadge(el) {
    let b = el.querySelector(".match-badge");
    if (!b) {
      b = document.createElement("span");
      b.className = "match-badge";
      // –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø
      b.style.marginLeft = "8px";
      b.style.fontWeight = "700";
      el.appendChild(b);
    }
    return b;
  }

  function setCorrect(el) {
    el.classList.remove("wrong");
    el.classList.add("correct");
    el.draggable = false;
    const badge = _ensureBadge(el);
    badge.textContent = "‚úÖ";
    badge.classList.remove("badge-wrong");
    badge.classList.add("badge-correct");
  }

  function setWrong(el) {
    // –µ—Å–ª–∏ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ‚Äî –Ω–∏—á–µ–≥–æ
    if (el.classList.contains("correct")) return;
    el.classList.remove("correct");
    el.classList.add("wrong");
    const badge = _ensureBadge(el);
    badge.textContent = "‚ùó";
    badge.classList.remove("badge-correct");
    badge.classList.add("badge-wrong");

    // –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ç–∫–∞—Ç/–∞–Ω–∏–º–∞—Ü–∏—è
    el.classList.add("shake");
    setTimeout(() => el.classList.remove("shake"), 600);
  }

  // –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –ø—Ä–∏ drag, –∏ –ø—Ä–∏ click)
  function handleMatch(aEl, bEl) {
    // –ù–∞–π–¥—ë–º –ø–∞—Ä—É –≤ correctMatches
    const correctPair = (section.content?.correctMatches || []).find(
      m => m.a === aEl.dataset.id && m.b === bEl.dataset.id
    );

    // –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º textContent += " ‚úÖ" ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º —á–µ—Ä–µ–∑ badge —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–æ—Å—å
    // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –µ—â—ë –≤ groupA (–∏–ª–∏ –≥–¥–µ —É–≥–æ–¥–Ω–æ) ‚Äî –ø—Ä–æ—Å—Ç–æ appendChild –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç –µ–≥–æ
    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
    const wasInDrop = aEl.parentElement && aEl.parentElement.classList.contains("drop-target");

    // move element to target (appendChild –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –Ω–æ–¥—É)
    bEl.appendChild(aEl);

    if (correctPair) {
      // –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º
      setCorrect(aEl);

      // –ø–æ–º–µ—Ç–∏—Ç—å drop –∫–∞–∫ completed (–æ–ø—Ü)
      bEl.classList.add("completed");

      // —É–≤–µ–ª–∏—á–∏–º —Å—á—ë—Ç—á–∏–∫ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      try {
        bEl.dataset.currentMatches = String(Number(bEl.dataset.currentMatches || 0) + 1);
      } catch (err) {}
    } else {
      // –Ω–µ–≤–µ—Ä–Ω–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ‚ùó –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å
      setWrong(aEl);

      // –æ—Å—Ç–∞–≤–ª—è–µ–º draggable = true (–º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å –¥–∞–ª—å—à–µ)
      aEl.draggable = true;
    }
  }

  // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ drag-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
  function refreshDragHandlers() {
    groupA.querySelectorAll(".drag-item").forEach(drag => {
      if (drag._dragHandlersAttached) return;
      drag.addEventListener("dragstart", e => {
        draggedItem = drag;
        drag.classList.add("dragging");
        try { e.dataTransfer.setData("text/plain", drag.dataset.id); } catch (err) {}
      });
      drag.addEventListener("dragend", () => {
        drag.classList.remove("dragging");
        draggedItem = null;
      });
      drag._dragHandlersAttached = true;
    });
  }

  // –≤—ã–∑–æ–≤–µ–º –æ–¥–∏–Ω —Ä–∞–∑ (–µ—Å–ª–∏ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –¥–æ–±–∞–≤–ª—è–µ—à—å –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã ‚Äî –≤—ã–∑—ã–≤–∞–π refreshDragHandlers())
  refreshDragHandlers();
} // –∫–æ–Ω–µ—Ü drag-drop


    // 5) Step-by-step list with hint
    if (section.type === "expandable-list") {
      const listWrap = document.createElement("div");
      listWrap.classList.add("step-list-wrap");

      // –ø–æ–¥—Å–∫–∞–∑–∫–∞
      const hint = document.createElement("p");
      hint.classList.add("step-hint");
      hint.textContent = "–ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ üëá";
      listWrap.appendChild(hint);

      const stepList = document.createElement("div");
      stepList.classList.add("step-list");

      let after = null;
      if (section.afterText) {
        after = document.createElement("p");
        after.classList.add("step-after");
        after.textContent = section.afterText;
        after.style.display = "none"; // —Å–∫—Ä—ã–≤–∞–µ–º –ø–æ –¥–µ—Ñ–æ–ª—Ç—É
      }

      (section.content || []).forEach((text, i) => {
        const row = document.createElement("div");
        row.classList.add("step-item");

        // –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—É–Ω–∫—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π
        if (i === section.content.length - 1) row.classList.add("final-step");

        row.textContent = text;

        // –≤—Å–µ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ —Å–∫—Ä—ã–≤–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        if (i > 0) row.style.display = "none";

        row.addEventListener("click", () => {
          const next = stepList.children[i + 1];
          if (next) {
            next.style.display = "flex";
            next.classList.add("fade-in");

            // –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—É–Ω–∫—Ç –∏ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å–ª–µ–¥–Ω–∏–π ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º afterText —Å—Ä–∞–∑—É
            if (next.classList.contains("final-step") && after) {
              after.style.display = "block";
              after.classList.add("fade-in");
            }
          }
        });

        stepList.appendChild(row);
      });

  listWrap.appendChild(stepList);
  if (after) listWrap.appendChild(after);

  sec.appendChild(listWrap);
}

    // 6) Simulator (—Å–∏–º—É–ª—è—Ç–æ—Ä —Ä–∞—Å—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–∞)
    if (section.type === "simulator") {
      const simWrap = document.createElement("div");
      simWrap.classList.add("simulator-container");

      const desc = document.createElement("p");
      desc.textContent = section.content || "–ü–æ–ø—Ä–æ–±—É–π —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Ö–æ–¥!";
      simWrap.appendChild(desc);

      const form = document.createElement("div");
      form.classList.add("simulator-form");

      const createField = (labelText, min, max, step, defaultValue, suffix = "", id, marks = []) => {
        const fieldWrap = document.createElement("div");
        fieldWrap.classList.add("sim-field");

        const label = document.createElement("label");
        label.textContent = labelText;
        fieldWrap.appendChild(label);

        const inputRow = document.createElement("div");
        inputRow.classList.add("input-row");

        const numberInput = document.createElement("input");
        numberInput.type = "number";
        numberInput.value = defaultValue;
        numberInput.id = id;
        numberInput.classList.add("sim-input");

        const suffixSpan = document.createElement("span");
        suffixSpan.textContent = suffix;
        suffixSpan.classList.add("suffix");

        const rangeInput = document.createElement("input");
        rangeInput.type = "range";
        rangeInput.min = min;
        rangeInput.max = max;
        rangeInput.step = step;
        rangeInput.value = defaultValue;
        rangeInput.classList.add("sim-range");

        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
        const hint = document.createElement("div");
        hint.classList.add("sim-hint");
        hint.style.display = "none";
        hint.style.fontSize = "11px";
        hint.style.color = "#666";
        hint.style.marginTop = "4px";
        hint.style.transition = "opacity 0.3s ease";

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        const showHint = (message, duration = 2000) => {
          hint.textContent = message;
          hint.style.display = "block";
          hint.style.opacity = "1";

          setTimeout(() => {
            hint.style.opacity = "0";
            setTimeout(() => {
              hint.style.display = "none";
            }, 300);
          }, duration);
        };

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è
        const adjustValue = (value) => {
          let val = parseFloat(value);
          let originalVal = val;
          let message = "";

          // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —á–∏—Å–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ
          if (isNaN(val)) {
            message = `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${min}`;
            val = min;
          } else {
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ –º–∏–Ω–∏–º—É–º—É –∏ –º–∞–∫—Å–∏–º—É–º—É
            if (val < min) {
              message = `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${min}`;
              val = min;
            } else if (val > max) {
              message = `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${max}`;
              val = max;
            }

            // –î–ª—è —Å—É–º–º—ã –≤–ª–æ–∂–µ–Ω–∏—è –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ 1000
            if (id === "amount") {
              const roundedVal = Math.round(val / 1000) * 1000;
              if (roundedVal !== val) {
                message = `–°—É–º–º–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∞ –¥–æ ${roundedVal.toLocaleString()} ‚ÇΩ (–∫—Ä–∞—Ç–Ω–æ 1000)`;
                val = roundedVal;
              }
            }

            // –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
            if (id === "rate") {
              const roundedVal = Math.round(val);
              if (roundedVal !== val) {
                message = `–°—Ç–∞–≤–∫–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∞ –¥–æ ${roundedVal}%`;
                val = roundedVal;
              }
            }

            // –î–ª—è –º–µ—Å—è—Ü–µ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
            if (id === "months") {
              const roundedVal = Math.round(val);
              if (roundedVal !== val) {
                message = `–°—Ä–æ–∫ –æ–∫—Ä—É–≥–ª–µ–Ω –¥–æ ${roundedVal} –º–µ—Å—è—Ü–µ–≤`;
                val = roundedVal;
              }
            }
          }

          return { value: val, message };
        };

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
        numberInput.addEventListener("blur", () => {
          const { value: adjustedValue, message } = adjustValue(numberInput.value);

          if (numberInput.value !== adjustedValue.toString()) {
            numberInput.value = adjustedValue;
            rangeInput.value = adjustedValue;
            if (message) {
              showHint(message);
            }
          }
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter
        numberInput.addEventListener("keypress", (e) => {
          if (e.key === "Enter") {
            const { value: adjustedValue, message } = adjustValue(numberInput.value);

            if (numberInput.value !== adjustedValue.toString()) {
              numberInput.value = adjustedValue;
              rangeInput.value = adjustedValue;
              if (message) {
                showHint(message);
              }
            }
            numberInput.blur();
          }
        });

        // –°–≤—è–∑—å —Å–ª–∞–π–¥–µ—Ä–∞ —Å –∏–Ω–ø—É—Ç–æ–º (—Å–ª–∞–π–¥–µ—Ä –≤—Å–µ–≥–¥–∞ –≤–∞–ª–∏–¥–µ–Ω)
        rangeInput.addEventListener("input", () => {
          numberInput.value = rangeInput.value;
        });

        // –†–∞–∑–º–µ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º
        const marksWrap = document.createElement("div");
        marksWrap.classList.add("sim-marks");
        marks.forEach(val => {
          const mark = document.createElement("span");
          mark.textContent = val;
          const percent = ((val - min) / (max - min)) * 100;
          mark.style.position = "absolute";
          mark.style.left = `${percent}%`;
          mark.style.transform = "translateX(-50%)";
          mark.style.top = "0";
          mark.style.fontSize = "12px";
          mark.style.color = "#999";
          mark.style.whiteSpace = "nowrap";
          marksWrap.appendChild(mark);
        });

        inputRow.appendChild(numberInput);
        inputRow.appendChild(suffixSpan);
        fieldWrap.appendChild(inputRow);
        fieldWrap.appendChild(rangeInput);
        fieldWrap.appendChild(marksWrap);
        fieldWrap.appendChild(hint); // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ –ø–æ–ª–µ

        return fieldWrap;
      };

      const amountField = createField("üíµ –°—É–º–º–∞ –≤–ª–æ–∂–µ–Ω–∏—è", 1000, 1000000, 1000, 10000, "‚ÇΩ", "amount", [1000, 250000, 500000, 750000, 1000000]);
      const rateField = createField("üìà –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞", 10, 31, 1, 15, "%", "rate", [10, 15, 20, 25, 30, 31]);
      const periodField = createField("üïí –°—Ä–æ–∫ (–º–µ—Å.)", 1, 120, 1, 12, "–º–µ—Å.", "months", [1, 12, 24, 36, 48, 60, 72, 84, 96, 108, 120]);

      form.appendChild(amountField);
      form.appendChild(rateField);
      form.appendChild(periodField);

      const calcBtn = document.createElement("button");
      calcBtn.textContent = "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å";
      calcBtn.classList.add("sim-btn");

      const result = document.createElement("div");
      result.classList.add("sim-result");
      result.textContent = "–†–µ–∑—É–ª—å—Ç–∞—Ç: 0 ‚ÇΩ";

      calcBtn.addEventListener("click", () => {
        const P = parseFloat(document.getElementById("amount").value);
        const r = parseFloat(document.getElementById("rate").value) / 100 / 12;
        const n = parseInt(document.getElementById("months").value);

        const total = P * Math.pow(1 + r, n);
        const profit = total - P;
        result.textContent = `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${profit.toFixed(2)} ‚ÇΩ –ø—Ä–∏–±—ã–ª–∏ –∑–∞ ${n} –º–µ—Å.`;
      });

      simWrap.appendChild(form);
      simWrap.appendChild(calcBtn);
      simWrap.appendChild(result);

      sec.appendChild(simWrap);
    }

    // 7) Dialogue (—Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏)
    if (section.type === "dialogue") {
      const dialogWrap = document.createElement("div");
      dialogWrap.classList.add("dialogue-container");

      section.content.forEach((line, i) => {
        const msg = document.createElement("div");
        msg.classList.add("dialogue-message");

        const isLeft = line.speaker === "–ú–∞—à–∞";
        msg.classList.add(isLeft ? "left" : "right");

        const avatar = document.createElement("div");
        avatar.classList.add("avatar");
        avatar.textContent = isLeft ? "üë©" : "üßë"; // –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ <img>

        const bubble = document.createElement("div");
        bubble.classList.add("bubble");
        bubble.textContent = line.text;

        // –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if (isLeft) {
          msg.append(avatar, bubble);
        } else {
          msg.append(bubble, avatar);
        }

        // –¥–æ–±–∞–≤–ª—è–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
          msg.classList.add("visible");
        }, i * 200);

        dialogWrap.appendChild(msg);
      });

      sec.appendChild(dialogWrap);
    }

    // 8) Pie-chart (–∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞)
    if (section.type === "piechart") {
      const chartWrap = document.createElement("div");
      chartWrap.classList.add("piechart-container");

      // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã –∏ –ª–µ–≥–µ–Ω–¥—ã
      const chartContent = document.createElement("div");
      chartContent.classList.add("piechart-content");
      chartContent.style.display = "flex";
      chartContent.style.flexWrap = "wrap";
      chartContent.style.alignItems = "center";
      chartContent.style.justifyContent = "center";
      chartContent.style.gap = "40px";
      chartContent.style.maxWidth = "800px";
      chartContent.style.margin = "0 auto";

      // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
      const chartContainer = document.createElement("div");
      chartContainer.classList.add("piechart");
      chartContainer.style.position = "relative";
      chartContainer.style.width = "220px";
      chartContainer.style.height = "220px";

      // Canvas –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
      const canvas = document.createElement("canvas");
      canvas.width = 220;
      canvas.height = 220;
      canvas.style.borderRadius = "50%";
      canvas.style.boxShadow = "0 8px 25px rgba(0,0,0,0.1)";

      chartContainer.appendChild(canvas);
      chartContent.appendChild(chartContainer);

      // –õ–µ–≥–µ–Ω–¥–∞ —Å–±–æ–∫—É
      const legend = document.createElement("div");
      legend.classList.add("piechart-legend");
      legend.style.display = "flex";
      legend.style.flexDirection = "column";
      legend.style.gap = "12px";
      legend.style.minWidth = "200px";

      const colors = ['#4e8cff', '#ff6b6b', '#51cf66', '#ffd43b', '#9775fa', '#22b8cf'];

      section.content.forEach((item, index) => {
        const legendItem = document.createElement("div");
        legendItem.classList.add("legend-item");
        legendItem.style.display = "flex";
        legendItem.style.alignItems = "center";
        legendItem.style.gap = "12px";
        legendItem.style.padding = "8px 12px";
        legendItem.style.borderRadius = "8px";
        legendItem.style.background = "rgba(255,255,255,0.7)";
        legendItem.style.boxShadow = "0 2px 8px rgba(0,0,0,0.05)";
        legendItem.style.transition = "all 0.3s ease";
        legendItem.style.opacity = "0";
        legendItem.style.transform = "translateX(-20px)";

        const colorBox = document.createElement("div");
        colorBox.classList.add("legend-color");
        colorBox.style.width = "16px";
        colorBox.style.height = "16px";
        colorBox.style.borderRadius = "4px";
        colorBox.style.boxShadow = "0 2px 4px rgba(0,0,0,0.1)";

        colorBox.style.backgroundColor = colors[index % colors.length];

        const label = document.createElement("span");
        label.classList.add("legend-label");
        label.textContent = `${item.label}`;
        label.style.fontSize = "0.95rem";
        label.style.fontWeight = "500";

        const value = document.createElement("span");
        value.classList.add("legend-value");
        value.textContent = `${item.value}%`;
        value.style.marginLeft = "auto";
        value.style.fontWeight = "700";
        value.style.color = "#333";

        legendItem.appendChild(colorBox);
        legendItem.appendChild(label);
        legendItem.appendChild(value);
        legend.appendChild(legendItem);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ª–µ–≥–µ–Ω–¥—ã
        setTimeout(() => {
          legendItem.style.opacity = "1";
          legendItem.style.transform = "translateX(0)";
        }, 600 + index * 100);
      });

      chartContent.appendChild(legend);
      chartWrap.appendChild(chartContent);

      // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
      if (section.note) {
        const note = document.createElement("p");
        note.classList.add("piechart-note");
        note.textContent = section.note;
        note.style.opacity = "0";
        chartWrap.appendChild(note);

        setTimeout(() => {
          note.style.opacity = "1";
        }, 1000);
      }

      sec.appendChild(chartWrap);

      // –†–∏—Å—É–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
      setTimeout(() => {
        drawAnimatedPieChart(canvas, section.content);
      }, 300);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    function drawAnimatedPieChart(canvas, data) {
      const ctx = canvas.getContext('2d');
      const centerX = canvas.width / 2;
      const centerY = canvas.height / 2;
      const radius = Math.min(centerX, centerY) - 15;

      const colors = ['#4e8cff', '#ff6b6b', '#51cf66', '#ffd43b', '#9775fa', '#22b8cf'];
      const durations = [800, 1000, 1200, 1400, 1600, 1800];

      let currentAngle = -0.5 * Math.PI;
      let startTime = Date.now();

      function animate() {
        const currentTime = Date.now();
        const elapsed = currentTime - startTime;

        ctx.clearRect(0, 0, canvas.width, canvas.height);

        let animatedCurrentAngle = -0.5 * Math.PI;

        data.forEach((item, index) => {
          const progress = Math.min(1, elapsed / durations[index]);
          const easedProgress = 1 - Math.pow(1 - progress, 3); // easeOutCubic

          const sliceAngle = (item.value / 100) * 2 * Math.PI * easedProgress;

          // –†–∏—Å—É–µ–º —Å–µ–≥–º–µ–Ω—Ç
          ctx.beginPath();
          ctx.moveTo(centerX, centerY);
          ctx.arc(centerX, centerY, radius, animatedCurrentAngle, animatedCurrentAngle + sliceAngle);
          ctx.closePath();

          ctx.fillStyle = colors[index % colors.length];
          ctx.fill();

          // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–≤–æ–¥–∫—É
          ctx.strokeStyle = 'white';
          ctx.lineWidth = 2;
          ctx.stroke();

          animatedCurrentAngle += sliceAngle;
        });

        // –ë–µ–ª—ã–π –∫—Ä—É–≥ –≤ —Ü–µ–Ω—Ç—Ä–µ
        ctx.beginPath();
        ctx.arc(centerX, centerY, radius * 0.5, 0, 2 * Math.PI);
        ctx.fillStyle = 'white';
        ctx.fill();

        if (elapsed < Math.max(...durations)) {
          requestAnimationFrame(animate);
        }
      }

      animate();
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –≤ —Ç–µ–ª–æ —É—Ä–æ–∫–∞
    lessonBody.appendChild(sec);
  }); // end forEach section


  /* ===== –ü—Ä–æ–≥—Ä–µ—Å—Å: —Å–æ—Ö—Ä–∞–Ω—è–µ–º/—á–∏—Ç–∞–µ–º –∏–∑ localStorage (–∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ) ===== */
  let maxProgress = parseInt(localStorage.getItem(`lesson_${lessonNum}`)) || 0;

  function updateProgressUI() {
    if (topProgressFill) topProgressFill.style.width = `${maxProgress}%`;
    if (topProgressPercent) topProgressPercent.textContent = `${maxProgress}%`;
    updateButtonState();
  }

  function updateButtonState() {
    if (!nextBtn) return;
    if (maxProgress >= 100) {
      nextBtn.disabled = false;
      nextBtn.classList.remove("btn-disabled");
    } else {
      nextBtn.disabled = true;
      nextBtn.classList.add("btn-disabled");
    }
  }

  updateProgressUI();

  window.addEventListener("scroll", () => {
    const scrollTop = window.scrollY;
    const scrollHeight = document.documentElement.scrollHeight - window.innerHeight;
    let scrolledPercent = Math.round((scrollTop / (scrollHeight || 1)) * 100);
    if (scrolledPercent > maxProgress) {
      maxProgress = Math.min(scrolledPercent, 100);
      localStorage.setItem(`lesson_${lessonNum}`, maxProgress);
      updateProgressUI();
    }
  });

  // Next / Back handlers
  if (nextBtn) {
    nextBtn.addEventListener("click", (e) => {
      if (maxProgress < 100) {
        e.preventDefault();
        return;
      }
      // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è lessons –∏–ª–∏ lessonsData)
      const total = (typeof lessonsData !== "undefined") ? lessonsData.length : (window.lessons ? lessons.length : lessonNum);
      if (lessonNum < total) {
        window.location.href = `lesson.html?num=${lessonNum + 1}`;
      } else {
        window.location.href = "index.html";
      }
    });
  }

  if (backBtn) {
    backBtn.addEventListener("click", (e) => {
      e.preventDefault();
      window.location.href = "index.html";
    });
  }
});