import asyncio

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, WebAppInfo

from config import BOT_TOKEN
from google_sheets import user_exists, update_user_data

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
class Registration(StatesGroup):
    waiting_for_fio = State()
    waiting_for_phone = State()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def get_identifier(message: Message):
    return message.from_user.username or f"id_{message.from_user.id}"

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
import re

def format_phone(phone: str) -> str | None:
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    digits = re.sub(r"\D", "", phone)

    # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 10 –∏–ª–∏ 11 —Ü–∏—Ñ—Ä
    if len(digits) == 11 and digits.startswith(("7", "8")):
        digits = "7" + digits[1:]
    elif len(digits) == 10:
        digits = "7" + digits
    else:
        return None  # –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–æ–≤–Ω–æ 11 —Ü–∏—Ñ—Ä
    if len(digits) != 11:
        return None

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º: +7 999 999 99 99
    formatted = f"+7 {digits[1:4]} {digits[4:7]} {digits[7:9]} {digits[9:11]}"
    return formatted

# --- –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ ---
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    identifier = get_identifier(message)

    if user_exists(identifier):
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –≤—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å üí™")
        await send_training_button(message)
        return

    # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –ø–æ –æ–±–ª–∏–≥–∞—Ü–∏—è–º –ù–§–ö-–°–ò üìö\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –§–ò–û."
    )
    await state.set_state(Registration.waiting_for_fio)


# --- –ü–æ–ª—É—á–∞–µ–º –§–ò–û ---
@dp.message(StateFilter(Registration.waiting_for_fio))
async def process_fio(message: Message, state: FSMContext):
    await state.update_data(fio=message.text)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton.model_validate({"text": "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", "request_contact": True})]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç:",
        reply_markup=keyboard
    )
    await state.set_state(Registration.waiting_for_phone)


# --- –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç ---
@dp.message(StateFilter(Registration.waiting_for_phone), F.contact)
async def process_contact(message: Message, state: FSMContext):
    phone = message.contact.phone_number
    data = await state.get_data()
    fio = data.get("fio", "")
    identifier = get_identifier(message)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
    update_user_data(identifier, fio, format_phone(phone))

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–µ–Ω ‚úÖ\n"
                         "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ üòé", reply_markup=ReplyKeyboardRemove())

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º WebApp –∫–Ω–æ–ø–∫—É
    await send_training_button(message)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
    await state.clear()


# --- –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤—Ä—É—á–Ω—É—é ---
@dp.message(StateFilter(Registration.waiting_for_phone))
async def process_phone_text(message: Message, state: FSMContext):
    raw_phone = message.text
    formatted_phone = format_phone(raw_phone)

    if not formatted_phone:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üòÖ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä: +7 999 999 99 99")
        return  # –∂–¥—ë–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞

    data = await state.get_data()
    fio = data.get("fio", "")
    identifier = get_identifier(message)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
    update_user_data(identifier, fio, formatted_phone)

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –±—ã–ª–∞
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–µ–Ω ‚úÖ\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ üòé", reply_markup=ReplyKeyboardRemove())

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º WebApp –∫–Ω–æ–ø–∫—É
    await send_training_button(message)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
    await state.clear()

# --- –ö–Ω–æ–ø–∫–∞ WebApp ---
async def send_training_button(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìö –ü—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ", web_app=WebAppInfo(url="https://linjjwh.github.io/nfk-academy/"))]],
        resize_keyboard=True
    )
    await message.answer("–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –ø–æ –æ–±–ª–∏–≥–∞—Ü–∏—è–º üëá", reply_markup=keyboard)

if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
